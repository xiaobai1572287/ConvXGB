import torch
import torch.nn as nn
import torchvision.models as models
import torchvision.transforms as transforms
import numpy as np
import pandas as pd
import xgboost as xgb
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report

data = pd.read_csv('path/to/data.csv')

transform = transforms.Compose([
    transforms.Resize((224, 224)),  
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])  
])

images = []
for path in data['image_path']:
    image = Image.open(path).convert('RGB')
    image = transform(image)
    images.append(image)

images = torch.stack(images)

clinical_data = data.drop(columns=['image_path', 'recurrence']).values


labels = data['recurrence'].values

X_train, X_test, y_train, y_test = train_test_split(images, labels, test_size=0.2, random_state=42)

resnet18 = models.resnet18(pretrained=True)

resnet18.fc = nn.Identity()

resnet18.eval()
with torch.no_grad():
    features = resnet18(X_train)
    features = nn.functional.adaptive_avg_pool2d(features, 1)
    features = features.view(features.size(0), -1)
    features = features.numpy()

combined_features = np.hstack([features, clinical_data])
xgb_model = xgb.XGBClassifier(objective='binary:logistic', random_state=42)

xgb_model.fit(combined_features, y_train)

with torch.no_grad():
    test_features = resnet18(X_test)
    test_features = nn.functional.adaptive_avg_pool2d(test_features, 1)
    test_features = test_features.view(test_features.size(0), -1)
    test_features = test_features.numpy()

test_combined_features = np.hstack([test_features, clinical_data])

predictions = xgb_model.predict(test_combined_features)
accuracy = accuracy_score(y_test, predictions)
report = classification_report(y_test, predictions)

print(f'Accuracy: {accuracy}')